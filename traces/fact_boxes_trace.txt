(mirajTrace
 (list
  (state (interp-init) (list) (store (list) (list)))
  (state
   (app-call
    (closV 'thunk (appC (idC 'thunk) (voidC)) (list))
    (closV 'v (appC (fileC "examples/fact_boxes.alpha") (numC 3)) (list)))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (closV 'v (appC (fileC "examples/fact_boxes.alpha") (numC 3)) (list))
    (voidV))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (closV
     'f
     (appC
      (lamC
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y)))))
      (lamC
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))))
     (list))
    (closV
     'fact
     (tagC
      (symbolC 'fact_boxes)
      (lamC
       'bx
       (letC
        'x
        (unboxC (idC 'bx))
        (ifC
         (equalC (idC 'x) (numC 0))
         (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
         (seqC
          (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
          (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
     (list)))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (closV
     'fact
     (tagC
      (symbolC 'fact_boxes)
      (lamC
       'bx
       (letC
        'x
        (unboxC (idC 'bx))
        (ifC
         (equalC (idC 'x) (numC 0))
         (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
         (seqC
          (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
          (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
     (list))
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (closV
     'x
     (appC (idC 'fact_recursive) (boxC (idC 'x)))
     (list
      (bind
       'fact_recursive
       (taggedV
        (symbolV 'fact_boxes)
        (closV
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
         (list
          (bind
           'fact
           (closV
            'y
            (appC (appC (idC 'x) (idC 'x)) (idC 'y))
            (list
             (bind
              'x
              (closV
               'x
               (appC
                (idC 'f)
                (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
               (list
                (bind
                 'f
                 (closV
                  'fact
                  (tagC
                   (symbolC 'fact_boxes)
                   (lamC
                    'bx
                    (letC
                     'x
                     (unboxC (idC 'bx))
                     (ifC
                      (equalC (idC 'x) (numC 0))
                      (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                      (seqC
                       (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                       (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
                  (list))))))
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))))))))
    (numV 3))
   (list)
   (store (list) (list)))
  (state
   (app-call
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list)))))))))
    (boxV 0))
   (list)
   (store (list (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (boxV 0))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'fact
     (tagC
      (symbolC 'fact_boxes)
      (lamC
       'bx
       (letC
        'x
        (unboxC (idC 'bx))
        (ifC
         (equalC (idC 'x) (numC 0))
         (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
         (seqC
          (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
          (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
     (list))
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list)))))))))
    (boxV 0))
   (list)
   (store (list (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (boxV 0))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'fact
     (tagC
      (symbolC 'fact_boxes)
      (lamC
       'bx
       (letC
        'x
        (unboxC (idC 'bx))
        (ifC
         (equalC (idC 'x) (numC 0))
         (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
         (seqC
          (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
          (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
     (list))
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list)))))))))
    (boxV 0))
   (list)
   (store (list (cell 0 (numV 1)) (cell 0 (numV 2)) (cell 0 (numV 3))) (list)))
  (state
   (app-call
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (boxV 0))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-call
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list)))))
    (closV
     'x
     (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
     (list
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-call
    (closV
     'fact
     (tagC
      (symbolC 'fact_boxes)
      (lamC
       'bx
       (letC
        'x
        (unboxC (idC 'bx))
        (ifC
         (equalC (idC 'x) (numC 0))
         (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
         (seqC
          (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
          (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
     (list))
    (closV
     'y
     (appC (appC (idC 'x) (idC 'x)) (idC 'y))
     (list
      (bind
       'x
       (closV
        'x
        (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
        (list
         (bind
          'f
          (closV
           'fact
           (tagC
            (symbolC 'fact_boxes)
            (lamC
             'bx
             (letC
              'x
              (unboxC (idC 'bx))
              (ifC
               (equalC (idC 'x) (numC 0))
               (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
               (seqC
                (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
           (list))))))
      (bind
       'f
       (closV
        'fact
        (tagC
         (symbolC 'fact_boxes)
         (lamC
          'bx
          (letC
           'x
           (unboxC (idC 'bx))
           (ifC
            (equalC (idC 'x) (numC 0))
            (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
            (seqC
             (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
             (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
        (list))))))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list))))))))))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-call
    (taggedV
     (symbolV 'fact_boxes)
     (closV
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
      (list
       (bind
        'fact
        (closV
         'y
         (appC (appC (idC 'x) (idC 'x)) (idC 'y))
         (list
          (bind
           'x
           (closV
            'x
            (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
            (list
             (bind
              'f
              (closV
               'fact
               (tagC
                (symbolC 'fact_boxes)
                (lamC
                 'bx
                 (letC
                  'x
                  (unboxC (idC 'bx))
                  (ifC
                   (equalC (idC 'x) (numC 0))
                   (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                   (seqC
                    (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                    (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
               (list))))))
          (bind
           'f
           (closV
            'fact
            (tagC
             (symbolC 'fact_boxes)
             (lamC
              'bx
              (letC
               'x
               (unboxC (idC 'bx))
               (ifC
                (equalC (idC 'x) (numC 0))
                (seqC (setboxC (idC 'bx) (numC 42)) (numC 1))
                (seqC
                 (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
                 (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
            (list)))))))))
    (boxV 0))
   (list)
   (store
    (list
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 1))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 1))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 1))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 1))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 2))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 2))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 6))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 6))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 6))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 6))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))
  (state
   (app-result (numV 6))
   (list)
   (store
    (list
     (cell 0 (numV 42))
     (cell 0 (numV 0))
     (cell 0 (numV 1))
     (cell 0 (numV 2))
     (cell 0 (numV 3)))
    (list)))))
