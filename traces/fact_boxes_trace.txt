(mirajTrace
 (list
  (app-call
   (closV
    'f
    (appC
     (lamC
      'x
      (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y)))))
     (lamC
      'x
      (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))))
    (list))
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (list)
   (store (list) (list) (list)))
  (app-call
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (list)
   (store
    (list
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 1) (bind 'f 0)))
   (list)
   (store
    (list
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 2))))
   (list)
   (store
    (list
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 2))))
   (list)
   (store
    (list
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'f
    (appC
     (lamC
      'x
      (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y)))))
     (lamC
      'x
      (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))))
    (list))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 2))))
   (list)
   (store
    (list
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list))))
 (list)
 (list
  (app-call
   (closV
    'x
    (appC (idC 'fact_recursive) (boxC (idC 'x)))
    (list (bind 'fact_recursive 3)))
   (numV 3)
   (list)
   (store
    (list
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 2))))
   (boxV 5)
   (list)
   (store
    (list
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 1) (bind 'f 0)))
   (boxV 5)
   (list)
   (store
    (list
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (list)
   (store
    (list
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 10) (bind 'f 0)))
   (list)
   (store
    (list
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 11))))
   (list)
   (store
    (list
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 11))))
   (list)
   (store
    (list
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 11))))
   (boxV 5)
   (list)
   (store
    (list
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 10) (bind 'f 0)))
   (boxV 5)
   (list)
   (store
    (list
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (list)
   (store
    (list
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 16) (bind 'f 0)))
   (list)
   (store
    (list
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 17))))
   (list)
   (store
    (list
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 17))))
   (list)
   (store
    (list
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 17))))
   (boxV 5)
   (list)
   (store
    (list
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 16) (bind 'f 0)))
   (boxV 5)
   (list)
   (store
    (list
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (list)
   (store
    (list
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 22) (bind 'f 0)))
   (list)
   (store
    (list
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'fact
    (tagC
     (strC "fact_boxes")
     (lamC
      'bx
      (letC
       'x
       (unboxC (idC 'bx))
       (ifC
        (equalC (idC 'x) (numC 0))
        (numC 1)
        (seqC
         (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
         (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
    (list))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 23))))
   (list)
   (store
    (list
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'x
    (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
    (list (bind 'f 0)))
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 23))))
   (list)
   (store
    (list
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-call
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 23))))
   (boxV 5)
   (list)
   (store
    (list
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 23))))
   (numV 1)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 16) (bind 'f 0)))
   (numV 1)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 17))))
   (numV 1)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 10) (bind 'f 0)))
   (numV 1)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 11))))
   (numV 2)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'y
    (appC (appC (idC 'x) (idC 'x)) (idC 'y))
    (list (bind 'x 1) (bind 'f 0)))
   (numV 2)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (taggedV
    (strV "fact_boxes")
    (closV
     'bx
     (letC
      'x
      (unboxC (idC 'bx))
      (ifC
       (equalC (idC 'x) (numC 0))
       (numC 1)
       (seqC
        (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
        (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
     (list (bind 'fact 2))))
   (numV 6)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))
  (app-return
   (closV
    'x
    (appC (idC 'fact_recursive) (boxC (idC 'x)))
    (list (bind 'fact_recursive 3)))
   (numV 6)
   (list)
   (store
    (list
     (cell 25 (numV 0))
     (cell 24 (boxV 5))
     (cell
      23
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 22) (bind 'f 0))))
     (cell
      22
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 21 (boxV 5))
     (cell 5 (numV 0))
     (cell 19 (numV 1))
     (cell 18 (boxV 5))
     (cell
      17
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 16) (bind 'f 0))))
     (cell
      16
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 15 (boxV 5))
     (cell 5 (numV 1))
     (cell 13 (numV 2))
     (cell 12 (boxV 5))
     (cell
      11
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 10) (bind 'f 0))))
     (cell
      10
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell 9 (boxV 5))
     (cell 5 (numV 2))
     (cell 7 (numV 3))
     (cell 6 (boxV 5))
     (cell 5 (numV 3))
     (cell 4 (numV 3))
     (cell
      3
      (taggedV
       (strV "fact_boxes")
       (closV
        'bx
        (letC
         'x
         (unboxC (idC 'bx))
         (ifC
          (equalC (idC 'x) (numC 0))
          (numC 1)
          (seqC
           (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
           (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))
        (list (bind 'fact 2)))))
     (cell
      2
      (closV
       'y
       (appC (appC (idC 'x) (idC 'x)) (idC 'y))
       (list (bind 'x 1) (bind 'f 0))))
     (cell
      1
      (closV
       'x
       (appC (idC 'f) (lamC 'y (appC (appC (idC 'x) (idC 'x)) (idC 'y))))
       (list (bind 'f 0))))
     (cell
      0
      (closV
       'fact
       (tagC
        (strC "fact_boxes")
        (lamC
         'bx
         (letC
          'x
          (unboxC (idC 'bx))
          (ifC
           (equalC (idC 'x) (numC 0))
           (numC 1)
           (seqC
            (setboxC (idC 'bx) (plusC (idC 'x) (numC -1)))
            (multC (idC 'x) (appC (idC 'fact) (idC 'bx))))))))
       (list))))
    (list)
    (list)))))
